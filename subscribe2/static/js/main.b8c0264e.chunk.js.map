{"version":3,"sources":["Router.js","App.js","serviceWorker.js","index.js","components/GlobalContext/index.js","components/Spin/index.js","components/BasicLayout/index.js","components/DappCard/index.js","components/Wrapper/index.js","components/CountDown/index.js"],"names":["Home","loadable","DappDetail","BuyDapp","History","HistoryDetail","exact","path","component","App","useState","wallet_address","target_address","contract","globalStore","setState","init","a","window","demos","getIdentity","wallet","_localStore","sessionStorage","getItem","_globalStore","address","JSON","parse","useEffect","className","Provider","value","updateStore","newState","store","Object","assign","setItem","stringify","Router","Boolean","location","hostname","match","html","document","getElementsByTagName","resize","style","fontSize","Math","min","body","clientWidth","addEventListener","initHtmlFontSize","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","GlobalContext","React","createContext","Spin","props","loadingText","width","height","display","alignItems","justifyContent","size","text","withRouter","children","title","history","onClick","goBack","src","process","alt","DappCard","tag","seconds","id","name","logo","price","time","status","now","addZero","number","String","replace","parseInt","PageWrapper","onLeftClick","backgroundColor","fontWeight","borderBottom","icon","type","color","timer","CountDown","cdtime","setCD","distance","interval","clearInterval","setInterval"],"mappings":"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","file":"static/js/main.b8c0264e.chunk.js","sourcesContent":["import React from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport loadable from \"@loadable/component\";\n\nconst Home = loadable(() => import(\"./page/home\"));\nconst DappDetail = loadable(() => import(\"./page/dappDetail\"));\nconst BuyDapp = loadable(() => import(\"./page/dappBuy\"));\nconst History = loadable(() => import(\"./page/history\"));\nconst HistoryDetail = loadable(() => import(\"./page/history_detail\"));\n\nexport default () => (\n  <Router>\n    <Switch>\n      <Route exact path=\"/\" component={Home} />\n      <Route exact path=\"/dapp_detail/:id\" component={DappDetail} />\n      <Route exact path=\"/dapp_buy/:id\" component={BuyDapp} />\n      <Route exact path=\"/history\" component={History} />\n      <Route exact path=\"/history_detail/:id\" component={HistoryDetail} />\n    </Switch>\n  </Router>\n);\n","import React, { useEffect, useState } from \"react\";\nimport Router from \"./Router\";\nimport VConsole from \"vconsole\";\nimport { GlobalContext } from \"./components\";\nimport \"demos\";\n\nfunction App() {\n  const [globalStore, setState] = useState({\n    wallet_address: \"\", // 钱包地址\n    target_address: \"\", // 收益地址\n    contract: \"\", // 合约地址\n  });\n\n  const init = async () => {\n    const wallet = await window.demos.getIdentity();\n    let _localStore = sessionStorage.getItem(\"localStore\");\n\n    const _globalStore = {\n      wallet_address: wallet.address,\n    };\n\n    if (_localStore) {\n      _localStore = JSON.parse(_localStore);\n      _globalStore.contract = _localStore?.contract;\n      _globalStore.target_address = _localStore?.target_address;\n    }\n    setState(_globalStore);\n    // // 调试工具\n\n    if (process.env.NODE_ENV === \"development\") {\n      var vConsole = new VConsole();\n    }\n  };\n\n  useEffect(() => {\n    init();\n  }, []);\n\n  const updateStore = (newState) => {\n    const store = { ...globalStore, ...newState };\n    setState(Object.assign({}, store));\n    sessionStorage.setItem(\"localStore\", JSON.stringify(store));\n  };\n\n  return (\n    <div className=\"app\">\n      <GlobalContext.Provider value={{ ...globalStore, updateStore }}>\n        <Router />\n      </GlobalContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/global.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst initHtmlFontSize = () => {\n  const html = document.getElementsByTagName(\"html\")[0];\n  const resize = () => {\n    html.style.fontSize = Math.min(document.body.clientWidth / 7.5, 100) + \"px\";\n  };\n  window.addEventListener(\"resize\", resize, false);\n  resize();\n};\ninitHtmlFontSize();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { forwardRef } from \"react\";\nconst GlobalContext = React.createContext(null);\nconst connect = formatter => {\n  return Component => {\n    return forwardRef((props, ref) => (\n      <GlobalContext.Consumer>\n        {({ updateStore, ...rest }) => {\n          let store = Object.assign({}, rest);\n          if (typeof formatter === \"function\") {\n            store = formatter(store);\n          }\n          return (\n            <Component\n              {...props}\n              {...store}\n              updateStore={updateStore}\n              ref={ref}\n            />\n          );\n        }}\n      </GlobalContext.Consumer>\n    ));\n  };\n};\n\nexport { GlobalContext, connect };\n","import React from \"react\";\nimport { ActivityIndicator } from \"antd-mobile\";\nimport \"./Spin.scss\";\n\nfunction Spin(props) {\n  const { style = {}, loadingText } = props;\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        height: \"100%\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        ...style,\n      }}\n    >\n      <ActivityIndicator\n        size=\"large\"\n        text={loadingText}\n        className=\"spin\"\n      />\n    </div>\n  );\n}\n\nexport default Spin;\n","import React from \"react\";\n// import { ActivityIndicator } from \"antd-mobile\";\nimport \"./basic_layout.scss\";\nimport { withRouter } from \"react-router\";\n\nfunction BasicLayout(props) {\n    const { children, title = '', history } = props;\n    function goBack (){\n        history.goBack();\n    }\n    return (\n        <div className='basic_layout'>\n            <div className='basic_layout-header'>\n                <div className='leading' onClick={goBack}><img src={`${process.env.PUBLIC_URL}/images/arrow_left.png`} alt=\"\"/></div>\n                <div className='title'>{title}</div>\n                <div className='action' />\n            </div>\n            {children}\n        </div>\n    );\n}\n\nexport default withRouter(BasicLayout);\n","import React from \"react\";\nimport \"./dapp_card.scss\";\n\nfunction DappCard(props) {\n    const {id, name, logo, price, time, status, onClick, now } = props;\n    let tag;\n\n    switch (status) {\n        case 0:\n            tag = 'pending';\n            break;\n        case 1:\n            tag = 'success';\n            break;\n        case 2:\n            tag = 'failed';\n            break;\n        default:\n    }\n    function _onClick() {\n        onClick && onClick(id);\n    }\n\n    function addZero(number) {\n        return String(number).replace(/^(?=(\\d))\\1$/, '0$1');\n    }\n\n    // function formatTime (time) {\n    //     const t = new Date(time*1000);\n    //     const year = t.getFullYear();\n    //     const month = t.getMonth() + 1;\n    //     const date = t.getDate();\n    //     const hours = t.getHours();\n    //     const m = t.getMinutes();\n    //     const s = t.getSeconds();\n    //\n    //     return `${year}-${addZero(month)}-${addZero(date)} ${hours}:${m}:${s}`;\n    // }\n\n    function formatCD(seconds) {\n        if(seconds <= 0) return '00:00:00';\n        return `${addZero(parseInt(seconds/(60*60)))}:${addZero(parseInt(seconds/60%60))}:${addZero(seconds%60)}`\n    }\n\n    return (\n        <div className='dapp_card' onClick={_onClick}>\n            <div className='img'><img src={logo} alt={name}/></div>\n            <div className='info'>\n                <div className='t1'>{name}</div>\n                <div style={{height: '0.1rem'}} />\n                <div className='t2'>价格: {price / 1e8}DOS</div>\n                <div style={{height: '0.1rem'}} />\n                {/*{time && <div className='t3'>申购时间: {formatTime(time)}</div>}*/}\n                {time && status === 0 && <div className='t3'>申购倒计时: {formatCD(time + 24*60*60 - now)}</div>}\n            </div>\n            {tag && <div className='tag'>\n                <img src={`${process.env.PUBLIC_URL}/images/tag_${tag}.png`} alt=\"\"/>\n            </div>}\n        </div>\n    );\n}\n\nexport default DappCard;\n","import React, { useEffect } from \"react\";\nimport { NavBar, Icon } from \"antd-mobile\";\n\nconst PageWrapper = (props) => {\n  const { title, history, children, onLeftClick } = props;\n\n  useEffect(() => {\n    document.title = title;\n  }, []);\n\n  const onLeftClickHanlder = () => {\n    if (onLeftClick && typeof onLeftClick === \"function\") {\n      onLeftClick();\n    } else {\n      history.goBack();\n    }\n  };\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      <NavBar\n        style={{\n          backgroundColor: \"#171932\",\n          fontWeight: \"500\",\n          borderBottom: \"1px solid #393939\",\n        }}\n        icon={<Icon type=\"left\" size=\"lg\" />}\n        onLeftClick={onLeftClickHanlder}\n      >\n        <span style={{ color: \"#ffffff\", fontSize: \"0.32rem\" }}>\n          {props.title}\n        </span>\n      </NavBar>\n      {children}\n    </div>\n  );\n};\n\nexport default PageWrapper;\n","import React, { useState, useEffect } from \"react\";\nlet timer = null;\nconst addZero = (number) => String(number).replace(/^(?=(\\d))\\1$/, \"0$1\");\n\nconst formatCD = (seconds) => {\n  return `${addZero(parseInt(seconds / (60 * 60)))}:${addZero(\n    parseInt((seconds / 60) % 60)\n  )}:${addZero(seconds % 60)}`;\n};\n\nfunction CountDown(props) {\n  const [cdtime, setCD] = useState(\"--:--:--\");\n  useEffect(() => {\n    const { time, now } = props;\n    const distance = time + 24 * 60 * 60 - now;\n    if (distance > 0) {\n      interval(distance);\n    }\n\n    return () => {\n      timer = null;\n    };\n  }, []);\n\n  const interval = (time) => {\n    clearInterval(timer);\n    setCD(time);\n    timer = setInterval(() => {\n      time = time - 1;\n      if (time <= 0) {\n        time = 0;\n        clearInterval(timer);\n      }\n      setCD(time);\n    }, 1000);\n  };\n  const { className = null, style = {}, text = \"倒计时：\" } = props;\n\n  return (\n    <span className={className} style={{ ...style }}>{`${text}${formatCD(\n      cdtime\n    )}`}</span>\n  );\n}\n\nexport default CountDown;\n"],"sourceRoot":""}